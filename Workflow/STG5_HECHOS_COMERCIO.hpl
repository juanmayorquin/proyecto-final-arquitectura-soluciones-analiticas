<?xml version="1.0" encoding="UTF-8"?>
<pipeline>
  <info>
    <name>STG5_HECHOS_COMERCIO</name>
    <name_sync_with_filename>Y</name_sync_with_filename>
    <description/>
    <extended_description/>
    <pipeline_version/>
    <pipeline_type>Normal</pipeline_type>
    <parameters>
    </parameters>
    <capture_transform_performance>N</capture_transform_performance>
    <transform_performance_capturing_delay>1000</transform_performance_capturing_delay>
    <transform_performance_capturing_size_limit>100</transform_performance_capturing_size_limit>
    <created_user>-</created_user>
    <created_date>2025/10/02 02:36:16.940</created_date>
    <modified_user>-</modified_user>
    <modified_date>2025/10/02 02:36:16.940</modified_date>
  </info>
  <notepads>
  </notepads>
  <order>
    <hop>
      <from>STG4_HECHOS_COMERCIO</from>
      <to>Script</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>Script</from>
      <to>STG5_HECHOS_COMERCIO</to>
      <enabled>Y</enabled>
    </hop>
  </order>
  <transform>
    <name>STG4_HECHOS_COMERCIO</name>
    <type>TableInput</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>DWH</connection>
    <execute_each_row>N</execute_each_row>
    <limit>0</limit>
    <sql>SELECT *
FROM stg4_hechos_comercio</sql>
    <variables_active>N</variables_active>
    <attributes/>
    <GUI>
      <xloc>144</xloc>
      <yloc>224</yloc>
    </GUI>
  </transform>
  <transform>
    <name>STG5_HECHOS_COMERCIO</name>
    <type>TableOutput</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <commit>1000</commit>
    <connection>DWH</connection>
    <fields>
      <field>
        <column_name>id_area</column_name>
        <stream_name>id_area</stream_name>
      </field>
      <field>
        <column_name>id_producto</column_name>
        <stream_name>id_producto</stream_name>
      </field>
      <field>
        <column_name>id_elemento</column_name>
        <stream_name>id_elemento</stream_name>
      </field>
      <field>
        <column_name>id_anio</column_name>
        <stream_name>id_anio</stream_name>
      </field>
      <field>
        <column_name>valor</column_name>
        <stream_name>valor</stream_name>
      </field>
      <field>
        <column_name>categoria</column_name>
        <stream_name>categoria</stream_name>
      </field>
    </fields>
    <ignore_errors>N</ignore_errors>
    <only_when_have_rows>N</only_when_have_rows>
    <partitioning_daily>N</partitioning_daily>
    <partitioning_enabled>N</partitioning_enabled>
    <partitioning_monthly>Y</partitioning_monthly>
    <return_keys>N</return_keys>
    <schema>"public"</schema>
    <specify_fields>Y</specify_fields>
    <table>stg5_hechos_comercio</table>
    <tablename_in_field>N</tablename_in_field>
    <tablename_in_table>Y</tablename_in_table>
    <truncate>Y</truncate>
    <use_batch>Y</use_batch>
    <attributes/>
    <GUI>
      <xloc>672</xloc>
      <yloc>224</yloc>
    </GUI>
  </transform>
  <transform>
    <name>Script</name>
    <type>SuperScript</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <fields>
</fields>
    <scriptLanguage>python</scriptLanguage>
    <scripts>
      <script>
        <scriptBody># Variables globales
valores = []
mediana = None

def process_rows(row):
    global valores
    simbolo = row.get("simbolos", None)
    valor = row.get("valor", None)

    # Guardamos solo si es "agregado" y no es nulo
    if simbolo == "agregado" and valor is not None:
        valores.append(float(valor))

    return row

def end_processing():
    global mediana
    if valores:
        sorted_vals = sorted(valores)
        n = len(sorted_vals)
        mid = n // 2

        if n % 2 == 0:
            mediana = (sorted_vals[mid - 1] + sorted_vals[mid]) / 2.0
        else:
            mediana = sorted_vals[mid]

def process_after(row):
    global mediana
    simbolo = row.get("simbolos", None)
    valor = row.get("valor", None)

    # Si es "agregado" y valor está vacío, reemplazar con la mediana
    if simbolo == "agregado" and (valor is None or valor == ""):
        row["valor"] = mediana

    return row
</scriptBody>
        <scriptName>script1</scriptName>
        <scriptType>0</scriptType>
      </script>
    </scripts>
    <attributes/>
    <GUI>
      <xloc>416</xloc>
      <yloc>224</yloc>
    </GUI>
  </transform>
  <transform_error_handling>
  </transform_error_handling>
  <attributes/>
</pipeline>
